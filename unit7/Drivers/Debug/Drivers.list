
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000df4  08000df4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e1c  08000e1c  00010e24  2**0
                  CONTENTS
  4 .ARM          00000000  08000e1c  08000e1c  00010e24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e1c  08000e24  00010e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e20  08000e20  00010e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000e24  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000e24  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e24  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000339d  00000000  00000000  00010e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000858  00000000  00000000  000141ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009cc  00000000  00000000  00014a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00015410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  000155b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000022b1  00000000  00000000  00015718  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b3e  00000000  00000000  000179c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009311  00000000  00000000  00019507  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022818  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000053c  00000000  00000000  00022894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ddc 	.word	0x08000ddc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ddc 	.word	0x08000ddc

08000170 <clock_init>:
#include "keypad.h"
#include"Stm32_F103C6_EXTI_Driver.h"

unsigned int IRQ_FLAG=0;

void clock_init() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB Bit 3 IOPBEN: IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <wait_ms>:

void wait_ms(uint32_t time) {
 80001a4:	b480      	push	{r7}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80001ac:	2300      	movs	r3, #0
 80001ae:	60fb      	str	r3, [r7, #12]
 80001b0:	e00b      	b.n	80001ca <wait_ms+0x26>
		for (j = 0; j < 255; j++);
 80001b2:	2300      	movs	r3, #0
 80001b4:	60bb      	str	r3, [r7, #8]
 80001b6:	e002      	b.n	80001be <wait_ms+0x1a>
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	3301      	adds	r3, #1
 80001bc:	60bb      	str	r3, [r7, #8]
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	2bfe      	cmp	r3, #254	; 0xfe
 80001c2:	d9f9      	bls.n	80001b8 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	3301      	adds	r3, #1
 80001c8:	60fb      	str	r3, [r7, #12]
 80001ca:	68fa      	ldr	r2, [r7, #12]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d3ef      	bcc.n	80001b2 <wait_ms+0xe>
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <EXTI9_CALLBACK>:
void EXTI9_CALLBACK(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	IRQ_FLAG=1;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI9_CALLBACK+0x1c>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 is happened _|- ");
 80001e6:	4805      	ldr	r0, [pc, #20]	; (80001fc <EXTI9_CALLBACK+0x20>)
 80001e8:	f000 f9c8 	bl	800057c <LCD_WRITE_STRING>
	wait_ms(1000);
 80001ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f0:	f7ff ffd8 	bl	80001a4 <wait_ms>

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	08000df4 	.word	0x08000df4

08000200 <main>:
int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0

	clock_init();
 8000206:	f7ff ffb3 	bl	8000170 <clock_init>
	LCD_INIT();
 800020a:	f000 f959 	bl	80004c0 <LCD_INIT>
	LCD_clear_screen();
 800020e:	f000 f915 	bl	800043c <LCD_clear_screen>
	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN =EXTI9PB9;
 8000212:	4a0e      	ldr	r2, [pc, #56]	; (800024c <main+0x4c>)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	ca07      	ldmia	r2, {r0, r1, r2}
 8000218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RASING;
 800021c:	2300      	movs	r3, #0
 800021e:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_Callback = EXTI9_CALLBACK;
 8000220:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <main+0x50>)
 8000222:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN=EXTI_IRQ_Enable;
 8000224:	2300      	movs	r3, #0
 8000226:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fb8a 	bl	8000944 <MCAL_EXTI_GPIO_Init>
	IRQ_FLAG=1;
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <main+0x54>)
 8000232:	2201      	movs	r2, #1
 8000234:	601a      	str	r2, [r3, #0]
	while (1){
		if(IRQ_FLAG)
 8000236:	4b07      	ldr	r3, [pc, #28]	; (8000254 <main+0x54>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0fb      	beq.n	8000236 <main+0x36>
		{
			LCD_clear_screen();
 800023e:	f000 f8fd 	bl	800043c <LCD_clear_screen>
			IRQ_FLAG=0;
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <main+0x54>)
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
		if(IRQ_FLAG)
 8000248:	e7f5      	b.n	8000236 <main+0x36>
 800024a:	bf00      	nop
 800024c:	08000e10 	.word	0x08000e10
 8000250:	080001dd 	.word	0x080001dd
 8000254:	2000001c 	.word	0x2000001c

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 8000262:	490d      	ldr	r1, [pc, #52]	; (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <LoopForever+0xe>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000268:	e002      	b.n	8000270 <LoopCopyDataInit>

0800026a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800026c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026e:	3304      	adds	r3, #4

08000270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000274:	d3f9      	bcc.n	800026a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000278:	4c0a      	ldr	r4, [pc, #40]	; (80002a4 <LoopForever+0x16>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800027c:	e001      	b.n	8000282 <LoopFillZerobss>

0800027e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000280:	3204      	adds	r2, #4

08000282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000284:	d3fb      	bcc.n	800027e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 fd85 	bl	8000d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ffb9 	bl	8000200 <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	08000e24 	.word	0x08000e24
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	20000060 	.word	0x20000060

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>

080002aa <delay_ms>:
 *  Author: Abdelrahman Raafat Mohamed
 */ 

#include "lcd.h"

void delay_ms(uint32_t time) {
 80002aa:	b480      	push	{r7}
 80002ac:	b085      	sub	sp, #20
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	e00b      	b.n	80002d0 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	e002      	b.n	80002c4 <delay_ms+0x1a>
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	3301      	adds	r3, #1
 80002c2:	60bb      	str	r3, [r7, #8]
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	2bfe      	cmp	r3, #254	; 0xfe
 80002c8:	d9f9      	bls.n	80002be <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3301      	adds	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d3ef      	bcc.n	80002b8 <delay_ms+0xe>
			;
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
	...

080002e4 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80002e8:	4b52      	ldr	r3, [pc, #328]	; (8000434 <LCD_GPIO_init+0x150>)
 80002ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ee:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002f0:	4b50      	ldr	r3, [pc, #320]	; (8000434 <LCD_GPIO_init+0x150>)
 80002f2:	2204      	movs	r2, #4
 80002f4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002f6:	4b4f      	ldr	r3, [pc, #316]	; (8000434 <LCD_GPIO_init+0x150>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002fc:	494d      	ldr	r1, [pc, #308]	; (8000434 <LCD_GPIO_init+0x150>)
 80002fe:	484e      	ldr	r0, [pc, #312]	; (8000438 <LCD_GPIO_init+0x154>)
 8000300:	f000 fc9f 	bl	8000c42 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000304:	4b4b      	ldr	r3, [pc, #300]	; (8000434 <LCD_GPIO_init+0x150>)
 8000306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800030a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800030c:	4b49      	ldr	r3, [pc, #292]	; (8000434 <LCD_GPIO_init+0x150>)
 800030e:	2204      	movs	r2, #4
 8000310:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000312:	4b48      	ldr	r3, [pc, #288]	; (8000434 <LCD_GPIO_init+0x150>)
 8000314:	2201      	movs	r2, #1
 8000316:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000318:	4946      	ldr	r1, [pc, #280]	; (8000434 <LCD_GPIO_init+0x150>)
 800031a:	4847      	ldr	r0, [pc, #284]	; (8000438 <LCD_GPIO_init+0x154>)
 800031c:	f000 fc91 	bl	8000c42 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000320:	4b44      	ldr	r3, [pc, #272]	; (8000434 <LCD_GPIO_init+0x150>)
 8000322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000326:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000328:	4b42      	ldr	r3, [pc, #264]	; (8000434 <LCD_GPIO_init+0x150>)
 800032a:	2204      	movs	r2, #4
 800032c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800032e:	4b41      	ldr	r3, [pc, #260]	; (8000434 <LCD_GPIO_init+0x150>)
 8000330:	2201      	movs	r2, #1
 8000332:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000334:	493f      	ldr	r1, [pc, #252]	; (8000434 <LCD_GPIO_init+0x150>)
 8000336:	4840      	ldr	r0, [pc, #256]	; (8000438 <LCD_GPIO_init+0x154>)
 8000338:	f000 fc83 	bl	8000c42 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800033c:	4b3d      	ldr	r3, [pc, #244]	; (8000434 <LCD_GPIO_init+0x150>)
 800033e:	2201      	movs	r2, #1
 8000340:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000342:	4b3c      	ldr	r3, [pc, #240]	; (8000434 <LCD_GPIO_init+0x150>)
 8000344:	2204      	movs	r2, #4
 8000346:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000348:	4b3a      	ldr	r3, [pc, #232]	; (8000434 <LCD_GPIO_init+0x150>)
 800034a:	2201      	movs	r2, #1
 800034c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800034e:	4939      	ldr	r1, [pc, #228]	; (8000434 <LCD_GPIO_init+0x150>)
 8000350:	4839      	ldr	r0, [pc, #228]	; (8000438 <LCD_GPIO_init+0x154>)
 8000352:	f000 fc76 	bl	8000c42 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000356:	4b37      	ldr	r3, [pc, #220]	; (8000434 <LCD_GPIO_init+0x150>)
 8000358:	2202      	movs	r2, #2
 800035a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800035c:	4b35      	ldr	r3, [pc, #212]	; (8000434 <LCD_GPIO_init+0x150>)
 800035e:	2204      	movs	r2, #4
 8000360:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000362:	4b34      	ldr	r3, [pc, #208]	; (8000434 <LCD_GPIO_init+0x150>)
 8000364:	2201      	movs	r2, #1
 8000366:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000368:	4932      	ldr	r1, [pc, #200]	; (8000434 <LCD_GPIO_init+0x150>)
 800036a:	4833      	ldr	r0, [pc, #204]	; (8000438 <LCD_GPIO_init+0x154>)
 800036c:	f000 fc69 	bl	8000c42 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000370:	4b30      	ldr	r3, [pc, #192]	; (8000434 <LCD_GPIO_init+0x150>)
 8000372:	2204      	movs	r2, #4
 8000374:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000376:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <LCD_GPIO_init+0x150>)
 8000378:	2204      	movs	r2, #4
 800037a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800037c:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <LCD_GPIO_init+0x150>)
 800037e:	2201      	movs	r2, #1
 8000380:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000382:	492c      	ldr	r1, [pc, #176]	; (8000434 <LCD_GPIO_init+0x150>)
 8000384:	482c      	ldr	r0, [pc, #176]	; (8000438 <LCD_GPIO_init+0x154>)
 8000386:	f000 fc5c 	bl	8000c42 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800038a:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <LCD_GPIO_init+0x150>)
 800038c:	2208      	movs	r2, #8
 800038e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000390:	4b28      	ldr	r3, [pc, #160]	; (8000434 <LCD_GPIO_init+0x150>)
 8000392:	2204      	movs	r2, #4
 8000394:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000396:	4b27      	ldr	r3, [pc, #156]	; (8000434 <LCD_GPIO_init+0x150>)
 8000398:	2201      	movs	r2, #1
 800039a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800039c:	4925      	ldr	r1, [pc, #148]	; (8000434 <LCD_GPIO_init+0x150>)
 800039e:	4826      	ldr	r0, [pc, #152]	; (8000438 <LCD_GPIO_init+0x154>)
 80003a0:	f000 fc4f 	bl	8000c42 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <LCD_GPIO_init+0x150>)
 80003a6:	2210      	movs	r2, #16
 80003a8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <LCD_GPIO_init+0x150>)
 80003ac:	2204      	movs	r2, #4
 80003ae:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003b0:	4b20      	ldr	r3, [pc, #128]	; (8000434 <LCD_GPIO_init+0x150>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003b6:	491f      	ldr	r1, [pc, #124]	; (8000434 <LCD_GPIO_init+0x150>)
 80003b8:	481f      	ldr	r0, [pc, #124]	; (8000438 <LCD_GPIO_init+0x154>)
 80003ba:	f000 fc42 	bl	8000c42 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <LCD_GPIO_init+0x150>)
 80003c0:	2220      	movs	r2, #32
 80003c2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <LCD_GPIO_init+0x150>)
 80003c6:	2204      	movs	r2, #4
 80003c8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <LCD_GPIO_init+0x150>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003d0:	4918      	ldr	r1, [pc, #96]	; (8000434 <LCD_GPIO_init+0x150>)
 80003d2:	4819      	ldr	r0, [pc, #100]	; (8000438 <LCD_GPIO_init+0x154>)
 80003d4:	f000 fc35 	bl	8000c42 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <LCD_GPIO_init+0x150>)
 80003da:	2240      	movs	r2, #64	; 0x40
 80003dc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <LCD_GPIO_init+0x150>)
 80003e0:	2204      	movs	r2, #4
 80003e2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <LCD_GPIO_init+0x150>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003ea:	4912      	ldr	r1, [pc, #72]	; (8000434 <LCD_GPIO_init+0x150>)
 80003ec:	4812      	ldr	r0, [pc, #72]	; (8000438 <LCD_GPIO_init+0x154>)
 80003ee:	f000 fc28 	bl	8000c42 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <LCD_GPIO_init+0x150>)
 80003f4:	2280      	movs	r2, #128	; 0x80
 80003f6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <LCD_GPIO_init+0x150>)
 80003fa:	2204      	movs	r2, #4
 80003fc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <LCD_GPIO_init+0x150>)
 8000400:	2201      	movs	r2, #1
 8000402:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000404:	490b      	ldr	r1, [pc, #44]	; (8000434 <LCD_GPIO_init+0x150>)
 8000406:	480c      	ldr	r0, [pc, #48]	; (8000438 <LCD_GPIO_init+0x154>)
 8000408:	f000 fc1b 	bl	8000c42 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000412:	4809      	ldr	r0, [pc, #36]	; (8000438 <LCD_GPIO_init+0x154>)
 8000414:	f000 fc99 	bl	8000d4a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041e:	4806      	ldr	r0, [pc, #24]	; (8000438 <LCD_GPIO_init+0x154>)
 8000420:	f000 fc93 	bl	8000d4a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800042a:	4803      	ldr	r0, [pc, #12]	; (8000438 <LCD_GPIO_init+0x154>)
 800042c:	f000 fc8d 	bl	8000d4a <MCAL_GPIO_WritePin>

}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000020 	.word	0x20000020
 8000438:	40010800 	.word	0x40010800

0800043c <LCD_clear_screen>:

void LCD_clear_screen() {
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000440:	2001      	movs	r0, #1
 8000442:	f000 f857 	bl	80004f4 <LCD_WRITE_COMMAND>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <LCD_lcd_kick>:

void LCD_lcd_kick() {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000456:	4807      	ldr	r0, [pc, #28]	; (8000474 <LCD_lcd_kick+0x28>)
 8000458:	f000 fc77 	bl	8000d4a <MCAL_GPIO_WritePin>
	delay_ms(50);
 800045c:	2032      	movs	r0, #50	; 0x32
 800045e:	f7ff ff24 	bl	80002aa <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000468:	4802      	ldr	r0, [pc, #8]	; (8000474 <LCD_lcd_kick+0x28>)
 800046a:	f000 fc6e 	bl	8000d4a <MCAL_GPIO_WritePin>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010800 	.word	0x40010800

08000478 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	460a      	mov	r2, r1
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	4613      	mov	r3, r2
 8000486:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d108      	bne.n	80004a0 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 800048e:	79bb      	ldrb	r3, [r7, #6]
 8000490:	2b0f      	cmp	r3, #15
 8000492:	d805      	bhi.n	80004a0 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	3b80      	subs	r3, #128	; 0x80
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f82a 	bl	80004f4 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d108      	bne.n	80004b8 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 80004a6:	79bb      	ldrb	r3, [r7, #6]
 80004a8:	2b0f      	cmp	r3, #15
 80004aa:	d805      	bhi.n	80004b8 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80004ac:	79bb      	ldrb	r3, [r7, #6]
 80004ae:	3b40      	subs	r3, #64	; 0x40
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f81e 	bl	80004f4 <LCD_WRITE_COMMAND>
		}
	}
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LCD_INIT>:

void LCD_INIT() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

	delay_ms(20);
 80004c4:	2014      	movs	r0, #20
 80004c6:	f7ff fef0 	bl	80002aa <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 80004ca:	f7ff ff0b 	bl	80002e4 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 80004ce:	200f      	movs	r0, #15
 80004d0:	f7ff feeb 	bl	80002aa <delay_ms>

	LCD_clear_screen();
 80004d4:	f7ff ffb2 	bl	800043c <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80004d8:	2038      	movs	r0, #56	; 0x38
 80004da:	f000 f80b 	bl	80004f4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80004de:	2006      	movs	r0, #6
 80004e0:	f000 f808 	bl	80004f4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80004e4:	2080      	movs	r0, #128	; 0x80
 80004e6:	f000 f805 	bl	80004f4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80004ea:	200f      	movs	r0, #15
 80004ec:	f000 f802 	bl	80004f4 <LCD_WRITE_COMMAND>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	b29b      	uxth	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <LCD_WRITE_COMMAND+0x40>)
 8000506:	f000 fc37 	bl	8000d78 <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <LCD_WRITE_COMMAND+0x40>)
 8000512:	f000 fc1a 	bl	8000d4a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <LCD_WRITE_COMMAND+0x40>)
 800051e:	f000 fc14 	bl	8000d4a <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f7ff fec1 	bl	80002aa <delay_ms>
	LCD_lcd_kick();
 8000528:	f7ff ff90 	bl	800044c <LCD_lcd_kick>

}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010800 	.word	0x40010800

08000538 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	b29b      	uxth	r3, r3
 8000546:	4619      	mov	r1, r3
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <LCD_WRITE_CHAR+0x40>)
 800054a:	f000 fc15 	bl	8000d78 <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	4808      	ldr	r0, [pc, #32]	; (8000578 <LCD_WRITE_CHAR+0x40>)
 8000556:	f000 fbf8 	bl	8000d4a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <LCD_WRITE_CHAR+0x40>)
 8000562:	f000 fbf2 	bl	8000d4a <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 8000566:	2001      	movs	r0, #1
 8000568:	f7ff fe9f 	bl	80002aa <delay_ms>
	LCD_lcd_kick();
 800056c:	f7ff ff6e 	bl	800044c <LCD_lcd_kick>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40010800 	.word	0x40010800

0800057c <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000588:	e01c      	b.n	80005c4 <LCD_WRITE_STRING+0x48>
		count++;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	3301      	adds	r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	607a      	str	r2, [r7, #4]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ffcd 	bl	8000538 <LCD_WRITE_CHAR>
		if (count == 16) {
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2b10      	cmp	r3, #16
 80005a2:	d104      	bne.n	80005ae <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 80005a4:	2100      	movs	r1, #0
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff ff66 	bl	8000478 <LCD_GOTO_XY>
 80005ac:	e00a      	b.n	80005c4 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2b20      	cmp	r3, #32
 80005b2:	d107      	bne.n	80005c4 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 80005b4:	f7ff ff42 	bl	800043c <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff ff5c 	bl	8000478 <LCD_GOTO_XY>
			count = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1de      	bne.n	800058a <LCD_WRITE_STRING+0xe>
		}
	}
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <Enable_NVIC>:
/**================================================================
 *						Generic Functions
 *===================================================================
 */
void Enable_NVIC(uint16_t IRQ)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d854      	bhi.n	800068e <Enable_NVIC+0xba>
 80005e4:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <Enable_NVIC+0x18>)
 80005e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ea:	bf00      	nop
 80005ec:	0800062d 	.word	0x0800062d
 80005f0:	0800063b 	.word	0x0800063b
 80005f4:	08000649 	.word	0x08000649
 80005f8:	08000657 	.word	0x08000657
 80005fc:	08000665 	.word	0x08000665
 8000600:	08000673 	.word	0x08000673
 8000604:	08000673 	.word	0x08000673
 8000608:	08000673 	.word	0x08000673
 800060c:	08000673 	.word	0x08000673
 8000610:	08000673 	.word	0x08000673
 8000614:	08000681 	.word	0x08000681
 8000618:	08000681 	.word	0x08000681
 800061c:	08000681 	.word	0x08000681
 8000620:	08000681 	.word	0x08000681
 8000624:	08000681 	.word	0x08000681
 8000628:	08000681 	.word	0x08000681
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <Enable_NVIC+0xc4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a19      	ldr	r2, [pc, #100]	; (8000698 <Enable_NVIC+0xc4>)
 8000632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000636:	6013      	str	r3, [r2, #0]
		break;
 8000638:	e029      	b.n	800068e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <Enable_NVIC+0xc4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <Enable_NVIC+0xc4>)
 8000640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000644:	6013      	str	r3, [r2, #0]
		break;
 8000646:	e022      	b.n	800068e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <Enable_NVIC+0xc4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <Enable_NVIC+0xc4>)
 800064e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000652:	6013      	str	r3, [r2, #0]
		break;
 8000654:	e01b      	b.n	800068e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <Enable_NVIC+0xc4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <Enable_NVIC+0xc4>)
 800065c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000660:	6013      	str	r3, [r2, #0]
		break;
 8000662:	e014      	b.n	800068e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <Enable_NVIC+0xc4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <Enable_NVIC+0xc4>)
 800066a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800066e:	6013      	str	r3, [r2, #0]
		break;
 8000670:	e00d      	b.n	800068e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <Enable_NVIC+0xc4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <Enable_NVIC+0xc4>)
 8000678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800067c:	6013      	str	r3, [r2, #0]
		break;
 800067e:	e006      	b.n	800068e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <Enable_NVIC+0xc8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a05      	ldr	r2, [pc, #20]	; (800069c <Enable_NVIC+0xc8>)
 8000686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800068a:	6013      	str	r3, [r2, #0]
		break;
 800068c:	bf00      	nop
	}

}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000e104 	.word	0xe000e104

080006a0 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d854      	bhi.n	800075a <Disable_NVIC+0xba>
 80006b0:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <Disable_NVIC+0x18>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	080006f9 	.word	0x080006f9
 80006bc:	08000707 	.word	0x08000707
 80006c0:	08000715 	.word	0x08000715
 80006c4:	08000723 	.word	0x08000723
 80006c8:	08000731 	.word	0x08000731
 80006cc:	0800073f 	.word	0x0800073f
 80006d0:	0800073f 	.word	0x0800073f
 80006d4:	0800073f 	.word	0x0800073f
 80006d8:	0800073f 	.word	0x0800073f
 80006dc:	0800073f 	.word	0x0800073f
 80006e0:	0800074d 	.word	0x0800074d
 80006e4:	0800074d 	.word	0x0800074d
 80006e8:	0800074d 	.word	0x0800074d
 80006ec:	0800074d 	.word	0x0800074d
 80006f0:	0800074d 	.word	0x0800074d
 80006f4:	0800074d 	.word	0x0800074d
		{
		case 0:
			NVIC_IRQ6_EXTI0_Disable;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <Disable_NVIC+0xc4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a19      	ldr	r2, [pc, #100]	; (8000764 <Disable_NVIC+0xc4>)
 80006fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000702:	6013      	str	r3, [r2, #0]
			break;
 8000704:	e029      	b.n	800075a <Disable_NVIC+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Disable;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <Disable_NVIC+0xc4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a16      	ldr	r2, [pc, #88]	; (8000764 <Disable_NVIC+0xc4>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6013      	str	r3, [r2, #0]
			break;
 8000712:	e022      	b.n	800075a <Disable_NVIC+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Disable;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <Disable_NVIC+0xc4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <Disable_NVIC+0xc4>)
 800071a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800071e:	6013      	str	r3, [r2, #0]
			break;
 8000720:	e01b      	b.n	800075a <Disable_NVIC+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Disable;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <Disable_NVIC+0xc4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <Disable_NVIC+0xc4>)
 8000728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072c:	6013      	str	r3, [r2, #0]
			break;
 800072e:	e014      	b.n	800075a <Disable_NVIC+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Disable;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <Disable_NVIC+0xc4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <Disable_NVIC+0xc4>)
 8000736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800073a:	6013      	str	r3, [r2, #0]
			break;
 800073c:	e00d      	b.n	800075a <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <Disable_NVIC+0xc4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <Disable_NVIC+0xc4>)
 8000744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000748:	6013      	str	r3, [r2, #0]
			break;
 800074a:	e006      	b.n	800075a <Disable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <Disable_NVIC+0xc8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a05      	ldr	r2, [pc, #20]	; (8000768 <Disable_NVIC+0xc8>)
 8000752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000756:	6013      	str	r3, [r2, #0]
			break;
 8000758:	bf00      	nop
		}

}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	e000e180 	.word	0xe000e180
 8000768:	e000e184 	.word	0xe000e184

0800076c <update_EXTI>:

void update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF Input -> Floating Input
	GPIO_PinConfig_t PinCfg;
	//Update the GPIO Pin to be Floating Input
	PinCfg.GPIO_PinNumber= EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	891b      	ldrh	r3, [r3, #8]
 8000778:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 800077a:	2301      	movs	r3, #1
 800077c:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	f107 0208 	add.w	r2, r7, #8
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fa5a 	bl	8000c42 <MCAL_GPIO_Init>
	//===================================================================

	//2- UPDATE AFIO to Route between EXTI line with Port A , B ,C ,D
	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	089b      	lsrs	r3, r3, #2
 8000794:	b29b      	uxth	r3, r3
 8000796:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4)/4 ;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	f003 0303 	and.w	r3, r3, #3
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	73bb      	strb	r3, [r7, #14]

	//Clear the Four bit
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position);
 80007a8:	4a5f      	ldr	r2, [pc, #380]	; (8000928 <update_EXTI+0x1bc>)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	3302      	adds	r3, #2
 80007ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b2:	7bbb      	ldrb	r3, [r7, #14]
 80007b4:	210f      	movs	r1, #15
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	495a      	ldr	r1, [pc, #360]	; (8000928 <update_EXTI+0x1bc>)
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	4002      	ands	r2, r0
 80007c4:	3302      	adds	r3, #2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port)&0xF) << AFIO_EXTICR_Position);
 80007ca:	4a57      	ldr	r2, [pc, #348]	; (8000928 <update_EXTI+0x1bc>)
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	3302      	adds	r3, #2
 80007d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4954      	ldr	r1, [pc, #336]	; (800092c <update_EXTI+0x1c0>)
 80007da:	428b      	cmp	r3, r1
 80007dc:	d016      	beq.n	800080c <update_EXTI+0xa0>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	4953      	ldr	r1, [pc, #332]	; (8000930 <update_EXTI+0x1c4>)
 80007e4:	428b      	cmp	r3, r1
 80007e6:	d00f      	beq.n	8000808 <update_EXTI+0x9c>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	4951      	ldr	r1, [pc, #324]	; (8000934 <update_EXTI+0x1c8>)
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d008      	beq.n	8000804 <update_EXTI+0x98>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4950      	ldr	r1, [pc, #320]	; (8000938 <update_EXTI+0x1cc>)
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d101      	bne.n	8000800 <update_EXTI+0x94>
 80007fc:	2303      	movs	r3, #3
 80007fe:	e006      	b.n	800080e <update_EXTI+0xa2>
 8000800:	2300      	movs	r3, #0
 8000802:	e004      	b.n	800080e <update_EXTI+0xa2>
 8000804:	2302      	movs	r3, #2
 8000806:	e002      	b.n	800080e <update_EXTI+0xa2>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <update_EXTI+0xa2>
 800080c:	2300      	movs	r3, #0
 800080e:	7bb9      	ldrb	r1, [r7, #14]
 8000810:	408b      	lsls	r3, r1
 8000812:	4618      	mov	r0, r3
 8000814:	4944      	ldr	r1, [pc, #272]	; (8000928 <update_EXTI+0x1bc>)
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	4302      	orrs	r2, r0
 800081a:	3302      	adds	r3, #2
 800081c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//=======================================================================================================

	//3- Update Rising or falling register
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000820:	4b46      	ldr	r3, [pc, #280]	; (800093c <update_EXTI+0x1d0>)
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	8812      	ldrh	r2, [r2, #0]
 8000828:	4611      	mov	r1, r2
 800082a:	2201      	movs	r2, #1
 800082c:	408a      	lsls	r2, r1
 800082e:	43d2      	mvns	r2, r2
 8000830:	4611      	mov	r1, r2
 8000832:	4a42      	ldr	r2, [pc, #264]	; (800093c <update_EXTI+0x1d0>)
 8000834:	400b      	ands	r3, r1
 8000836:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000838:	4b40      	ldr	r3, [pc, #256]	; (800093c <update_EXTI+0x1d0>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	8812      	ldrh	r2, [r2, #0]
 8000840:	4611      	mov	r1, r2
 8000842:	2201      	movs	r2, #1
 8000844:	408a      	lsls	r2, r1
 8000846:	43d2      	mvns	r2, r2
 8000848:	4611      	mov	r1, r2
 800084a:	4a3c      	ldr	r2, [pc, #240]	; (800093c <update_EXTI+0x1d0>)
 800084c:	400b      	ands	r3, r1
 800084e:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RASING)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7b1b      	ldrb	r3, [r3, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d10b      	bne.n	8000870 <update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000858:	4b38      	ldr	r3, [pc, #224]	; (800093c <update_EXTI+0x1d0>)
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	8812      	ldrh	r2, [r2, #0]
 8000860:	4611      	mov	r1, r2
 8000862:	2201      	movs	r2, #1
 8000864:	408a      	lsls	r2, r1
 8000866:	4611      	mov	r1, r2
 8000868:	4a34      	ldr	r2, [pc, #208]	; (800093c <update_EXTI+0x1d0>)
 800086a:	430b      	orrs	r3, r1
 800086c:	6093      	str	r3, [r2, #8]
 800086e:	e029      	b.n	80008c4 <update_EXTI+0x158>

	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7b1b      	ldrb	r3, [r3, #12]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d10b      	bne.n	8000890 <update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000878:	4b30      	ldr	r3, [pc, #192]	; (800093c <update_EXTI+0x1d0>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	8812      	ldrh	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	4611      	mov	r1, r2
 8000888:	4a2c      	ldr	r2, [pc, #176]	; (800093c <update_EXTI+0x1d0>)
 800088a:	430b      	orrs	r3, r1
 800088c:	60d3      	str	r3, [r2, #12]
 800088e:	e019      	b.n	80008c4 <update_EXTI+0x158>

	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RASING_FALLING)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7b1b      	ldrb	r3, [r3, #12]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d115      	bne.n	80008c4 <update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <update_EXTI+0x1d0>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	8812      	ldrh	r2, [r2, #0]
 80008a0:	4611      	mov	r1, r2
 80008a2:	2201      	movs	r2, #1
 80008a4:	408a      	lsls	r2, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a24      	ldr	r2, [pc, #144]	; (800093c <update_EXTI+0x1d0>)
 80008aa:	430b      	orrs	r3, r1
 80008ac:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <update_EXTI+0x1d0>)
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	4611      	mov	r1, r2
 80008b8:	2201      	movs	r2, #1
 80008ba:	408a      	lsls	r2, r1
 80008bc:	4611      	mov	r1, r2
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <update_EXTI+0x1d0>)
 80008c0:	430b      	orrs	r3, r1
 80008c2:	60d3      	str	r3, [r2, #12]
	}
	//=======================================================================================================
	//4- Update IRQ Handling CALLback
	GP_IRQ_Callback[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_Callback;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <update_EXTI+0x1d4>)
 80008d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//=======================================================================================================
	//5- Enable/Disable IRQ
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7b5b      	ldrb	r3, [r3, #13]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d110      	bne.n	80008fe <update_EXTI+0x192>
	{
		EXTI->IMR |=(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <update_EXTI+0x1d0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	8812      	ldrh	r2, [r2, #0]
 80008e4:	4611      	mov	r1, r2
 80008e6:	2201      	movs	r2, #1
 80008e8:	408a      	lsls	r2, r1
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <update_EXTI+0x1d0>)
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6013      	str	r3, [r2, #0]
		Enable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fe6c 	bl	80005d4 <Enable_NVIC>
		Disable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	}


}
 80008fc:	e010      	b.n	8000920 <update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <update_EXTI+0x1d0>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	8812      	ldrh	r2, [r2, #0]
 8000906:	4611      	mov	r1, r2
 8000908:	2201      	movs	r2, #1
 800090a:	408a      	lsls	r2, r1
 800090c:	43d2      	mvns	r2, r2
 800090e:	4611      	mov	r1, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <update_EXTI+0x1d0>)
 8000912:	400b      	ands	r3, r1
 8000914:	6013      	str	r3, [r2, #0]
		Disable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fec0 	bl	80006a0 <Disable_NVIC>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40010000 	.word	0x40010000
 800092c:	40010800 	.word	0x40010800
 8000930:	40010c00 	.word	0x40010c00
 8000934:	40011000 	.word	0x40011000
 8000938:	40011400 	.word	0x40011400
 800093c:	40010400 	.word	0x40010400
 8000940:	20000024 	.word	0x20000024

08000944 <MCAL_EXTI_GPIO_Init>:
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				 also mandatory to enable RCC clock for AFIO and corresponding GPIO
 */

void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t* EXTI_Config)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	update_EXTI(EXTI_Config);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff0d 	bl	800076c <update_EXTI>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <EXTI0_IRQHandler>:
 *						ISR Functions
 *===================================================================
 */

void EXTI0_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	// cleared by  written "1"  into the bit pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <EXTI0_IRQHandler+0x1c>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <EXTI0_IRQHandler+0x1c>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6153      	str	r3, [r2, #20]
	// CALL IRQ CALL
	GP_IRQ_Callback[0]();
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <EXTI0_IRQHandler+0x20>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4798      	blx	r3
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40010400 	.word	0x40010400
 800097c:	20000024 	.word	0x20000024

08000980 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	// cleared by  written "1"  into the bit pending register (EXTI_PR)
	EXTI->PR |= 1<<1 ;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <EXTI1_IRQHandler+0x1c>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <EXTI1_IRQHandler+0x1c>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	6153      	str	r3, [r2, #20]
	// CALL IRQ CALL
	GP_IRQ_Callback[1]();
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <EXTI1_IRQHandler+0x20>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	4798      	blx	r3
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40010400 	.word	0x40010400
 80009a0:	20000024 	.word	0x20000024

080009a4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	// cleared by  written "1"  into the bit pending register (EXTI_PR)
	EXTI->PR |= 1<<2 ;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <EXTI2_IRQHandler+0x1c>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <EXTI2_IRQHandler+0x1c>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6153      	str	r3, [r2, #20]
	// CALL IRQ CALL
	GP_IRQ_Callback[2]();
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <EXTI2_IRQHandler+0x20>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	4798      	blx	r3
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40010400 	.word	0x40010400
 80009c4:	20000024 	.word	0x20000024

080009c8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	// cleared by  written "1"  into the bit pending register (EXTI_PR)
	EXTI->PR |= 1<<3 ;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <EXTI3_IRQHandler+0x1c>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <EXTI3_IRQHandler+0x1c>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6153      	str	r3, [r2, #20]
	// CALL IRQ CALL
	GP_IRQ_Callback[3]();
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <EXTI3_IRQHandler+0x20>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	4798      	blx	r3
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40010400 	.word	0x40010400
 80009e8:	20000024 	.word	0x20000024

080009ec <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	// cleared by  written "1"  into the bit pending register (EXTI_PR)
	EXTI->PR |= 1<<4 ;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <EXTI4_IRQHandler+0x1c>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <EXTI4_IRQHandler+0x1c>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6153      	str	r3, [r2, #20]
	// CALL IRQ CALL
	GP_IRQ_Callback[4]();
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <EXTI4_IRQHandler+0x20>)
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	4798      	blx	r3
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010400 	.word	0x40010400
 8000a0c:	20000024 	.word	0x20000024

08000a10 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5) {EXTI->PR |= (1<<5)  ;  GP_IRQ_Callback[5]();}
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	f003 0320 	and.w	r3, r3, #32
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d008      	beq.n	8000a32 <EXTI9_5_IRQHandler+0x22>
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a26:	f043 0320 	orr.w	r3, r3, #32
 8000a2a:	6153      	str	r3, [r2, #20]
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <EXTI9_5_IRQHandler+0xa4>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	4798      	blx	r3
	if (EXTI->PR & 1<<6) {EXTI->PR |= (1<<6)  ;  GP_IRQ_Callback[6]();}
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d008      	beq.n	8000a50 <EXTI9_5_IRQHandler+0x40>
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a48:	6153      	str	r3, [r2, #20]
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <EXTI9_5_IRQHandler+0xa4>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4798      	blx	r3
	if (EXTI->PR & 1<<7) {EXTI->PR |= (1<<7)  ;  GP_IRQ_Callback[7]();}
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d008      	beq.n	8000a6e <EXTI9_5_IRQHandler+0x5e>
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a66:	6153      	str	r3, [r2, #20]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <EXTI9_5_IRQHandler+0xa4>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	4798      	blx	r3
	if (EXTI->PR & 1<<8) {EXTI->PR |= (1<<8)  ;  GP_IRQ_Callback[8]();}
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d008      	beq.n	8000a8c <EXTI9_5_IRQHandler+0x7c>
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <EXTI9_5_IRQHandler+0xa4>)
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	4798      	blx	r3
	if (EXTI->PR & 1<<9) {EXTI->PR |= (1<<9)  ;  GP_IRQ_Callback[9]();}
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d008      	beq.n	8000aaa <EXTI9_5_IRQHandler+0x9a>
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <EXTI9_5_IRQHandler+0xa0>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa2:	6153      	str	r3, [r2, #20]
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <EXTI9_5_IRQHandler+0xa4>)
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa8:	4798      	blx	r3
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40010400 	.word	0x40010400
 8000ab4:	20000024 	.word	0x20000024

08000ab8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10) {EXTI->PR |= (1<<10)  ;  GP_IRQ_Callback[10]();}
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d008      	beq.n	8000ada <EXTI15_10_IRQHandler+0x22>
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	4a29      	ldr	r2, [pc, #164]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad2:	6153      	str	r3, [r2, #20]
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <EXTI15_10_IRQHandler+0xc0>)
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad8:	4798      	blx	r3
	if (EXTI->PR & 1<<11) {EXTI->PR |= (1<<11)  ;  GP_IRQ_Callback[11]();}
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d008      	beq.n	8000af8 <EXTI15_10_IRQHandler+0x40>
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <EXTI15_10_IRQHandler+0xc0>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	4798      	blx	r3
	if (EXTI->PR & 1<<12) {EXTI->PR |= (1<<12)  ;  GP_IRQ_Callback[12]();}
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <EXTI15_10_IRQHandler+0x5e>
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0e:	6153      	str	r3, [r2, #20]
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <EXTI15_10_IRQHandler+0xc0>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4798      	blx	r3
	if (EXTI->PR & 1<<13) {EXTI->PR |= (1<<13)  ;  GP_IRQ_Callback[13]();}
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d008      	beq.n	8000b34 <EXTI15_10_IRQHandler+0x7c>
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <EXTI15_10_IRQHandler+0xc0>)
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	4798      	blx	r3
	if (EXTI->PR & 1<<14) {EXTI->PR |= (1<<14)  ;  GP_IRQ_Callback[14]();}
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d008      	beq.n	8000b52 <EXTI15_10_IRQHandler+0x9a>
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4a:	6153      	str	r3, [r2, #20]
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <EXTI15_10_IRQHandler+0xc0>)
 8000b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b50:	4798      	blx	r3
	if (EXTI->PR & 1<<15) {EXTI->PR |= (1<<15)  ;  GP_IRQ_Callback[15]();}
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d008      	beq.n	8000b70 <EXTI15_10_IRQHandler+0xb8>
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <EXTI15_10_IRQHandler+0xbc>)
 8000b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <EXTI15_10_IRQHandler+0xc0>)
 8000b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6e:	4798      	blx	r3
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40010400 	.word	0x40010400
 8000b78:	20000024 	.word	0x20000024

08000b7c <GET_CRLH_Position>:
 */

#include "Stm32_F103C6_GPIO_Driver.h"

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	2b80      	cmp	r3, #128	; 0x80
 8000b8a:	d042      	beq.n	8000c12 <GET_CRLH_Position+0x96>
 8000b8c:	2b80      	cmp	r3, #128	; 0x80
 8000b8e:	dc11      	bgt.n	8000bb4 <GET_CRLH_Position+0x38>
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d036      	beq.n	8000c02 <GET_CRLH_Position+0x86>
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	dc06      	bgt.n	8000ba6 <GET_CRLH_Position+0x2a>
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d02e      	beq.n	8000bfa <GET_CRLH_Position+0x7e>
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d02e      	beq.n	8000bfe <GET_CRLH_Position+0x82>
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d028      	beq.n	8000bf6 <GET_CRLH_Position+0x7a>
 8000ba4:	e047      	b.n	8000c36 <GET_CRLH_Position+0xba>
 8000ba6:	2b20      	cmp	r3, #32
 8000ba8:	d02f      	beq.n	8000c0a <GET_CRLH_Position+0x8e>
 8000baa:	2b40      	cmp	r3, #64	; 0x40
 8000bac:	d02f      	beq.n	8000c0e <GET_CRLH_Position+0x92>
 8000bae:	2b10      	cmp	r3, #16
 8000bb0:	d029      	beq.n	8000c06 <GET_CRLH_Position+0x8a>
 8000bb2:	e040      	b.n	8000c36 <GET_CRLH_Position+0xba>
 8000bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bb8:	d033      	beq.n	8000c22 <GET_CRLH_Position+0xa6>
 8000bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bbe:	dc09      	bgt.n	8000bd4 <GET_CRLH_Position+0x58>
 8000bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bc4:	d029      	beq.n	8000c1a <GET_CRLH_Position+0x9e>
 8000bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bca:	d028      	beq.n	8000c1e <GET_CRLH_Position+0xa2>
 8000bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd0:	d021      	beq.n	8000c16 <GET_CRLH_Position+0x9a>
 8000bd2:	e030      	b.n	8000c36 <GET_CRLH_Position+0xba>
 8000bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd8:	d027      	beq.n	8000c2a <GET_CRLH_Position+0xae>
 8000bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bde:	dc03      	bgt.n	8000be8 <GET_CRLH_Position+0x6c>
 8000be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000be4:	d01f      	beq.n	8000c26 <GET_CRLH_Position+0xaa>
 8000be6:	e026      	b.n	8000c36 <GET_CRLH_Position+0xba>
 8000be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bec:	d01f      	beq.n	8000c2e <GET_CRLH_Position+0xb2>
 8000bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bf2:	d01e      	beq.n	8000c32 <GET_CRLH_Position+0xb6>
 8000bf4:	e01f      	b.n	8000c36 <GET_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e01e      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	e01c      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	e01a      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000c02:	230c      	movs	r3, #12
 8000c04:	e018      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000c06:	2310      	movs	r3, #16
 8000c08:	e016      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000c0a:	2314      	movs	r3, #20
 8000c0c:	e014      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000c0e:	2318      	movs	r3, #24
 8000c10:	e012      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000c12:	231c      	movs	r3, #28
 8000c14:	e010      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e00e      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	e00c      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	e00a      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000c22:	230c      	movs	r3, #12
 8000c24:	e008      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000c26:	2310      	movs	r3, #16
 8000c28:	e006      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000c2a:	2314      	movs	r3, #20
 8000c2c:	e004      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000c2e:	2318      	movs	r3, #24
 8000c30:	e002      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000c32:	231c      	movs	r3, #28
 8000c34:	e000      	b.n	8000c38 <GET_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t* pinconfig)
{
 8000c42:	b590      	push	{r4, r7, lr}
 8000c44:	b085      	sub	sp, #20
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]

	configregister = (pinconfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	2bff      	cmp	r3, #255	; 0xff
 8000c5a:	d801      	bhi.n	8000c60 <MCAL_GPIO_Init+0x1e>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	e001      	b.n	8000c64 <MCAL_GPIO_Init+0x22>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3304      	adds	r3, #4
 8000c64:	60bb      	str	r3, [r7, #8]

	// clear CNF8[1:0] MODE8[1:0]
	(*configregister) &=~(0Xf << GET_CRLH_Position(pinconfig->GPIO_PinNumber));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff86 	bl	8000b7c <GET_CRLH_Position>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	230f      	movs	r3, #15
 8000c76:	4093      	lsls	r3, r2
 8000c78:	43da      	mvns	r2, r3
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	789b      	ldrb	r3, [r3, #2]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d00b      	beq.n	8000ca4 <MCAL_GPIO_Init+0x62>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	2b06      	cmp	r3, #6
 8000c92:	d007      	beq.n	8000ca4 <MCAL_GPIO_Init+0x62>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d003      	beq.n	8000ca4 <MCAL_GPIO_Init+0x62>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	789b      	ldrb	r3, [r3, #2]
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d10e      	bne.n	8000cc2 <MCAL_GPIO_Init+0x80>
	{
		// set CNF8[1:0] MODE[1:0]
		PIN_Config =( (((pinconfig->GPIO_MODE - 4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0F);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	789b      	ldrb	r3, [r3, #2]
 8000ca8:	3b04      	subs	r3, #4
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	b25a      	sxtb	r2, r3
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	78db      	ldrb	r3, [r3, #3]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e031      	b.n	8000d26 <MCAL_GPIO_Init+0xe4>

	}
	//IF pin is input
	else // MODE = 00: INPUT mode (reset state)
	{
		if((pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (pinconfig->GPIO_MODE == GPIO_MODE_Analog))
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	789b      	ldrb	r3, [r3, #2]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d003      	beq.n	8000cd2 <MCAL_GPIO_Init+0x90>
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	789b      	ldrb	r3, [r3, #2]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d107      	bne.n	8000ce2 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF8[1:0] MODE[1:0]00
			PIN_Config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	789b      	ldrb	r3, [r3, #2]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e021      	b.n	8000d26 <MCAL_GPIO_Init+0xe4>
		}else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	789b      	ldrb	r3, [r3, #2]
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d107      	bne.n	8000cfa <MCAL_GPIO_Init+0xb8>
		{
			//set CNF8[1:0] MODE[1:0]00
			PIN_Config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e015      	b.n	8000d26 <MCAL_GPIO_Init+0xe4>
		}
		else //PU PD Input
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PU)  << 2) | (0x0)) & 0x0F);
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	73fb      	strb	r3, [r7, #15]
			if (pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	789b      	ldrb	r3, [r3, #2]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d107      	bne.n	8000d16 <MCAL_GPIO_Init+0xd4>
			{
				//PxODR = 1 Input Pull up : table 20. port bit configuration table
				GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	8812      	ldrh	r2, [r2, #0]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	e007      	b.n	8000d26 <MCAL_GPIO_Init+0xe4>

			}
			else
			{
				//PxODR = 1 Input Pull up : table 20. port bit configuration table
				GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	8812      	ldrh	r2, [r2, #0]
 8000d1e:	43d2      	mvns	r2, r2
 8000d20:	401a      	ands	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60da      	str	r2, [r3, #12]

			}

		}
	}  // write on CRL OR CRH
	(*configregister) |= ((PIN_Config)<< GET_CRLH_Position(pinconfig->GPIO_PinNumber));
 8000d26:	7bfc      	ldrb	r4, [r7, #15]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff25 	bl	8000b7c <GET_CRLH_Position>
 8000d32:	4603      	mov	r3, r0
 8000d34:	fa04 f203 	lsl.w	r2, r4, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}

08000d4a <MCAL_GPIO_WritePin>:
 * @param[in]	-Value: Pin value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOX , uint16_t PinNumber, uint8_t value)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	460b      	mov	r3, r1
 8000d54:	807b      	strh	r3, [r7, #2]
 8000d56:	4613      	mov	r3, r2
 8000d58:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_RESET)
 8000d5a:	787b      	ldrb	r3, [r7, #1]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <MCAL_GPIO_WritePin+0x1e>
		//OR
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOX->BSRR =(uint32_t)PinNumber ;
 8000d60:	887a      	ldrh	r2, [r7, #2]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOX->BRR=(uint32_t)PinNumber;
	}

}
 8000d66:	e002      	b.n	8000d6e <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR=(uint32_t)PinNumber;
 8000d68:	887a      	ldrh	r2, [r7, #2]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	615a      	str	r2, [r3, #20]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <MCAL_GPIO_WritePort>:
 * @param[in]	-GPIOx: where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOX , uint16_t value)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR = (uint32_t)value;
 8000d84:	887a      	ldrh	r2, [r7, #2]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60da      	str	r2, [r3, #12]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <__libc_init_array>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	2500      	movs	r5, #0
 8000d98:	4e0c      	ldr	r6, [pc, #48]	; (8000dcc <__libc_init_array+0x38>)
 8000d9a:	4c0d      	ldr	r4, [pc, #52]	; (8000dd0 <__libc_init_array+0x3c>)
 8000d9c:	1ba4      	subs	r4, r4, r6
 8000d9e:	10a4      	asrs	r4, r4, #2
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	d109      	bne.n	8000db8 <__libc_init_array+0x24>
 8000da4:	f000 f81a 	bl	8000ddc <_init>
 8000da8:	2500      	movs	r5, #0
 8000daa:	4e0a      	ldr	r6, [pc, #40]	; (8000dd4 <__libc_init_array+0x40>)
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <__libc_init_array+0x44>)
 8000dae:	1ba4      	subs	r4, r4, r6
 8000db0:	10a4      	asrs	r4, r4, #2
 8000db2:	42a5      	cmp	r5, r4
 8000db4:	d105      	bne.n	8000dc2 <__libc_init_array+0x2e>
 8000db6:	bd70      	pop	{r4, r5, r6, pc}
 8000db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dbc:	4798      	blx	r3
 8000dbe:	3501      	adds	r5, #1
 8000dc0:	e7ee      	b.n	8000da0 <__libc_init_array+0xc>
 8000dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dc6:	4798      	blx	r3
 8000dc8:	3501      	adds	r5, #1
 8000dca:	e7f2      	b.n	8000db2 <__libc_init_array+0x1e>
 8000dcc:	08000e1c 	.word	0x08000e1c
 8000dd0:	08000e1c 	.word	0x08000e1c
 8000dd4:	08000e1c 	.word	0x08000e1c
 8000dd8:	08000e20 	.word	0x08000e20

08000ddc <_init>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr

08000de8 <_fini>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	bf00      	nop
 8000dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dee:	bc08      	pop	{r3}
 8000df0:	469e      	mov	lr, r3
 8000df2:	4770      	bx	lr


toggle 3 Led on sequential way then buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d4  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a8  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000307  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016c  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
}

int main(void)
{
	/* DDRD = 0b11110000; */
	setbit(DDRD,4);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 61       	ori	r24, 0x10	; 16
  70:	81 bb       	out	0x11, r24	; 17
    setbit(DDRD,5);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 62       	ori	r24, 0x20	; 32
  76:	81 bb       	out	0x11, r24	; 17
	setbit(DDRD,6);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	81 bb       	out	0x11, r24	; 17
	setbit(DDRD,7);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 68       	ori	r24, 0x80	; 128
  82:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		togglebit(PORTD,5);
  84:	92 b3       	in	r25, 0x12	; 18
  86:	80 e2       	ldi	r24, 0x20	; 32
  88:	98 27       	eor	r25, r24
  8a:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	34 e3       	ldi	r19, 0x34	; 52
  90:	9c e0       	ldi	r25, 0x0C	; 12
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x26>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
		_delay_ms(500);
		togglebit(PORTD,5);
  9e:	92 b3       	in	r25, 0x12	; 18
  a0:	89 27       	eor	r24, r25
  a2:	82 bb       	out	0x12, r24	; 18
		togglebit(PORTD,6);
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	98 27       	eor	r25, r24
  aa:	92 bb       	out	0x12, r25	; 18
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	34 e3       	ldi	r19, 0x34	; 52
  b0:	9c e0       	ldi	r25, 0x0C	; 12
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x46>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
		_delay_ms(500);
		togglebit(PORTD,6);
  be:	92 b3       	in	r25, 0x12	; 18
  c0:	89 27       	eor	r24, r25
  c2:	82 bb       	out	0x12, r24	; 18
		togglebit(PORTD,7);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	80 58       	subi	r24, 0x80	; 128
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	34 e3       	ldi	r19, 0x34	; 52
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x64>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
	    _delay_ms(500);
		togglebit(PORTD,7);
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	80 58       	subi	r24, 0x80	; 128
  e0:	82 bb       	out	0x12, r24	; 18
		togglebit(PORTD,4);
  e2:	92 b3       	in	r25, 0x12	; 18
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	98 27       	eor	r25, r24
  e8:	92 bb       	out	0x12, r25	; 18
  ea:	9f ef       	ldi	r25, 0xFF	; 255
  ec:	24 e3       	ldi	r18, 0x34	; 52
  ee:	3c e0       	ldi	r19, 0x0C	; 12
  f0:	91 50       	subi	r25, 0x01	; 1
  f2:	20 40       	sbci	r18, 0x00	; 0
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x84>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x8e>
  fa:	00 00       	nop
		_delay_ms(500);
		togglebit(PORTD,4);
  fc:	92 b3       	in	r25, 0x12	; 18
  fe:	89 27       	eor	r24, r25
 100:	82 bb       	out	0x12, r24	; 18
 102:	c0 cf       	rjmp	.-128    	; 0x84 <main+0x18>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
